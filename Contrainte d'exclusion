void optimiserLigneAssemblage(FILE *fichierPrecedences, FILE *fichierExclusions, FILE *fichierOperations, FILE *fichierTempsCycle) {
    // Lecture du nombre d'opérations depuis le fichier des opérations
    int nombreOperations;
    float tempsCycle;
    fscanf(fichierOperations, "%d", &nombreOperations);
    fscanf(fichierTempsCycle, "%f", &tempsCycle);

    // Lecture des opérations et de leurs temps d'exécution
    Operation operations[MAX_OPERATIONS];
    for (int i = 0; i < nombreOperations; i++) {
        fscanf(fichierOperations, "%d%f", &operations[i].operation, &operations[i].temps_execution);
    }

    // Initialisation des structures de données pour les contraintes
    int precedences[MAX_OPERATIONS][MAX_OPERATIONS] = {0};
    int exclusions[MAX_OPERATIONS][MAX_OPERATIONS] = {0};

    // Lecture des contraintes de précédence depuis le fichier
    int arc1, arc2;
    while (fscanf(fichierPrecedences, "%d%d", &arc1, &arc2) == 2) {
        precedences[arc1 - 1][arc2 - 1] = 1;
    }

    // Lecture des contraintes d'exclusion depuis le fichier
    while (fscanf(fichierExclusions, "%d%d", &arc1, &arc2) == 2) {
        exclusions[arc1 - 1][arc2 - 1] = 1;
        exclusions[arc2 - 1][arc1 - 1] = 1; // Symétrique
    }

    // Tableau pour suivre l'état de chaque station au fil du temps
    int stations[MAX_STATIONS][MAX_OPERATIONS + 1] = {0};

    // Affectation des opérations aux stations tout en respectant les contraintes
    for (int i = 0; i < nombreOperations; i++) {
        int operation = i + 1;
        printf("Tentative d'affectation de l'Op%d...\n", operation);

        // Variable pour suivre si l'opération a été affectée ou non
        int operationAffectee = 0;

        for (int station = 0; station < MAX_STATIONS; station++) {
            float tempsDebut = stations[station][stations[station][0]];
            float tempsFinOperationPrecedente = tempsDebut + precedences[operations[stations[station][stations[station][0]] - 1].operation - 1][operation - 1];

            if (tempsFinOperationPrecedente <= tempsDebut) {
                tempsFinOperationPrecedente = tempsDebut;
            }

            if (tempsFinOperationPrecedente + operations[i].temps_execution <= tempsCycle) {
                // Vérifier les contraintes d'exclusion
                int exclusionViolated = 0;
                for (int j = 1; j <= stations[station][0]; j++) {
                    printf("Vérification de la contrainte d'exclusion : Op%d et Op%d\n", operation, stations[station][j]);
                    if (exclusions[operation - 1][stations[station][j] - 1]) {
                        exclusionViolated = 1;
                        printf("Contrainte d'exclusion violée : Op%d et Op%d ne peuvent pas être affectées à la même station.\n", operation, stations[station][j]);
                        break;
                    }
                }

                // Si les contraintes d'exclusion ne sont pas violées, affecter l'opération à la station
                if (!exclusionViolated) {
                    stations[station][0]++;
                    stations[station][stations[station][0]] = operation;

                    // Mettre à jour le temps de fin de la station
                    if (stations[station][0] > 1) {
                        int precedenteOperation = stations[station][stations[station][0] - 1];
                        float tempsDebut = stations[station][stations[station][0] - 1] == operation ? 0 : operations[precedenteOperation - 1].temps_execution;

                        stations[station][0]++;
                        stations[station][stations[station][0]] = stations[station][stations[station][0] - 1] + precedences[precedenteOperation - 1][operation - 1] + tempsDebut;
                    } else {
                        // La première opération à cette station
                        stations[station][0]++;
                        stations[station][stations[station][0]] = operations[operation - 1].temps_execution;
                    }

                    // Marquer que l'opération a été affectée et sortir de la boucle des stations
                    operationAffectee = 1;
                    break;
                }
            }
        }

        // Si l'opération n'a pas pu être affectée, afficher un message
        if (!operationAffectee) {
            printf("Échec d'affectation : Op%d\n", operation);
        }
    }

    for (int i = 0; i < MAX_STATIONS; i++) {
        if (stations[i][0] > 0) {
            printf("Station %d :", i + 1);
            for (int j = 1; j <= stations[i][0]; j++) {
                printf(" Op%d [%.2fs]", stations[i][j], stations[i][j + 1]);
                j++; // Passer au prochain temps de début
            }
            printf("\n");
        }
    }
}

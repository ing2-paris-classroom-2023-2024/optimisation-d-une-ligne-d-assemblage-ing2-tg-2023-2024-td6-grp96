#ifndef GRAPHE_H_INCLUDED
#define GRAPHE_H_INCLUDED

#include <stdio.h>
#include <stdlib.h>


/* Structure d'un arc*/
struct Arc
{
    int sommet; // numéro de sommet d'un arc adjacent au sommet initial
    int valeur;
    struct Arc* arc_suivant;
};

/* Alias de pointeur sur un Arc */
typedef struct Arc* pArc;

/* Structure d'un sommet*/
struct Sommet
{
    struct Arc* arc;
    int valeur;
    char couleur;

};

/* Alias de pointeur sur un Sommet */
typedef struct Sommet* pSommet;

/* Alias d'un Graphe */
typedef struct Graphe
{
    int taille;
    int orientation;
    int ordre;
    pSommet* pSommet;
} Graphe;

// créer le graphe
Graphe* CreerGraphe(int ordre);

/* La construction du réseau peut se faire à partir d'un fichier dont le nom est passé en paramètre
Le fichier contient : ordre, taille,orientation (0 ou 1)et liste des arcs */
Graphe * lire_graphe(char * nomFichier);

// Ajouter l'arête entre les sommets s1 et s2 du graphe
pSommet* CreerArete(pSommet* sommet,int s1,int s2);

/* affichage des successeurs du sommet num*/
void afficher_successeurs(pSommet * sommet, int num);

/*affichage du graphe avec les successeurs de chaque sommet */
void graphe_afficher(Graphe* graphe);

#endif // GRAPHE_H_INCLUDED


*********************************************************************************************************************************
*********************************************************************************************************************************
Partie Baptiste :

#include <stdio.h>

#define MAX_OPERATIONS 35
#define MAX_STATIONS 10

int exclusion[MAX_OPERATIONS][MAX_OPERATIONS];

void lireExclusions(FILE *fichier) {
    int op1, op2;
    while (fscanf(fichier, "%d %d", &op1, &op2) != EOF) {
        exclusion[op1 - 1][op2 - 1] = 1; // Marquer les contraintes d'exclusion
        exclusion[op2 - 1][op1 - 1] = 1; // Si symétrique
    }
}

int stationDisponible(int operation, int station, int stations[]) {
    int i;
    for (i = 0; i < MAX_OPERATIONS; ++i) {
        if (stations[i] == station && exclusion[operation][i]) {
            return 0; // Contrainte d'exclusion violée
        }
    }
    return 1; // Aucune contrainte d'exclusion violée
}

int assignerStation(int operation, int stations[]) {
    int i;
    for (i = 0; i < MAX_STATIONS; ++i) {
        if (stations[i] == 0 && stationDisponible(operation, i, stations)) {
            stations[i] = operation; // Assigner l'opération à la station
            return 1; // Opération affectée avec succès
        }
    }
    return 0; // Affectation impossible
}

void optimiserLigneAssemblage() {
    FILE *fichier = fopen("exclusions.txt", "r");
    if (fichier == NULL) {
        printf("Impossible d'ouvrir le fichier des exclusions.\n");
        return;
    }

    lireExclusions(fichier);
    fclose(fichier);

    int stations[MAX_STATIONS] = {0}; // Initialiser les stations à 0 (non affectées)
    int operations[MAX_OPERATIONS]; // Initialiser les opérations

    int i;
    for (i = 0; i < MAX_OPERATIONS; ++i) {
        if (!assignerStation(operations[i], stations)) {
            printf("Impossible d'affecter l'opération %d\n", operations[i]);
            // Gérer le cas où une opération ne peut pas être affectée
        }
    }

    printf("Affectation des opérations aux stations terminée.\n");
    // Afficher ou utiliser les résultats de l'optimisation
}

int main() {
    optimiserLigneAssemblage();
    return 0;
}




**********************************************************************************************************************************************
**********************************************************************************************************************************************
**********************************************************************************************************************************************
**********************************************************************************************************************************************
**********************************************************************************************************************************************
**********************************************************************************************************************************************
CODE FINALE DE LA CONTRAINTE D'EXCLUSION NE PAS TOUCHER (penser à verifier que le fichier texte est bien dans le cmakelistedebug 
et que le nom/format est respecté) : 

#include <stdio.h>
#include <stdlib.h>

#define MAX_OPERATIONS 35
#define MAX_STATIONS 35

int exclusion[MAX_OPERATIONS][MAX_OPERATIONS];

void lireExclusions(FILE *fichier) {
    int op1, op2;
    while (fscanf(fichier, "%d %d", &op1, &op2) != EOF) {
        exclusion[op1 - 1][op2 - 1] = 1; // Marquer les contraintes d'exclusion
        exclusion[op2 - 1][op1 - 1] = 1; // Si symétrique
    }
}

int stationEstValide(int station[], int operation, int numOperations) {
    for (int i = 0; i < numOperations; ++i) {
        if (station[i] != 0 && exclusion[station[i] - 1][operation]) {
            return 0; // Contrainte d'exclusion violée
        }
    }
    return 1; // Aucune contrainte d'exclusion violée
}

void optimiserLigneAssemblage() {
    FILE *fichier = fopen("exclusions.txt", "r");
    if (fichier == NULL) {
        printf("Impossible d'ouvrir le fichier des exclusions.\n");
        return;
    }

    lireExclusions(fichier);
    fclose(fichier);

    int stations[MAX_STATIONS][MAX_OPERATIONS] = {{0}};
    int numStations = 0;

    for (int operation = 1; operation <= MAX_OPERATIONS; ++operation) {
        int trouve = 0;
        for (int station = 0; station < numStations; ++station) {
            if (stationEstValide(stations[station], operation - 1, operation)) {
                stations[station][operation - 1] = operation;
                trouve = 1;
                break;
            }
        }
        if (!trouve) {
            stations[numStations][0] = operation;
            numStations++;
        }
    }

    for (int i = 0; i < numStations; ++i) {
        printf("Station %d : ", i + 1);
        for (int j = 0; j < MAX_OPERATIONS; ++j) {
            if (stations[i][j] != 0) {
                printf("%d ", stations[i][j]);
            }
        }
        printf("\n");
    }
}

int main() {
    optimiserLigneAssemblage();
    return 0;
}

AFFICHAGE DANS LA CONSOLE : 

C:\Users\Administrateur\CLionProjects\ing2projet1\cmake-build-debug\ing2projet1.exe
Station 1 : 1 2 3 5 6 7 8 9 10 12 14 16 18 19 23 25 26 27 28 29 30 31 34 35
Station 2 : 4 11 13 17 20 21 22 24 32 33
Station 3 : 15

Process finished with exit code 0






















